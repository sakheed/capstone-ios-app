// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: detection.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Signalq_Location: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var latitude: Double = 0

  var longitude: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Signalq_Orientation: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pitch: Double = 0

  var roll: Double = 0

  var yaw: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Signalq_Gyroscope: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var x: Double = 0

  var y: Double = 0

  var z: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Signalq_SensorData: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var location: Signalq_Location {
    get {return _location ?? Signalq_Location()}
    set {_location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return self._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {self._location = nil}

  var pressure: Double = 0

  var orientation: Signalq_Orientation {
    get {return _orientation ?? Signalq_Orientation()}
    set {_orientation = newValue}
  }
  /// Returns true if `orientation` has been explicitly set.
  var hasOrientation: Bool {return self._orientation != nil}
  /// Clears the value of `orientation`. Subsequent reads from it will return its default value.
  mutating func clearOrientation() {self._orientation = nil}

  var gyroscope: Signalq_Gyroscope {
    get {return _gyroscope ?? Signalq_Gyroscope()}
    set {_gyroscope = newValue}
  }
  /// Returns true if `gyroscope` has been explicitly set.
  var hasGyroscope: Bool {return self._gyroscope != nil}
  /// Clears the value of `gyroscope`. Subsequent reads from it will return its default value.
  mutating func clearGyroscope() {self._gyroscope = nil}

  var heartrate: Double = 0

  var altitude: Double = 0

  var relativeAltitude: Double = 0

  var floorsClimbed: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _location: Signalq_Location? = nil
  fileprivate var _orientation: Signalq_Orientation? = nil
  fileprivate var _gyroscope: Signalq_Gyroscope? = nil
}

struct Signalq_Classification: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// whether it was a gunshot
  var result: String = String()

  /// confidence 0.0 - 1.0
  var score: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Signalq_Detections: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var detections: [Signalq_DetectionMessage] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Signalq_DetectionMessage: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique identifier
  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var timeUtcMilliseconds: Int64 {
    get {return _storage._timeUtcMilliseconds}
    set {_uniqueStorage()._timeUtcMilliseconds = newValue}
  }

  var sensors: Signalq_SensorData {
    get {return _storage._sensors ?? Signalq_SensorData()}
    set {_uniqueStorage()._sensors = newValue}
  }
  /// Returns true if `sensors` has been explicitly set.
  var hasSensors: Bool {return _storage._sensors != nil}
  /// Clears the value of `sensors`. Subsequent reads from it will return its default value.
  mutating func clearSensors() {_uniqueStorage()._sensors = nil}

  var classification: Signalq_Classification {
    get {return _storage._classification ?? Signalq_Classification()}
    set {_uniqueStorage()._classification = newValue}
  }
  /// Returns true if `classification` has been explicitly set.
  var hasClassification: Bool {return _storage._classification != nil}
  /// Clears the value of `classification`. Subsequent reads from it will return its default value.
  mutating func clearClassification() {_uniqueStorage()._classification = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Signalq_Acknowledgement: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// True for Ack, False for Nack
  var success: Bool = false

  /// If Nack, the reason for failure
  var reason: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "signalq"

extension Signalq_Location: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Location"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "latitude"),
    2: .same(proto: "longitude"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.latitude) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.longitude) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.latitude.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.latitude, fieldNumber: 1)
    }
    if self.longitude.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.longitude, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Signalq_Location, rhs: Signalq_Location) -> Bool {
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Signalq_Orientation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Orientation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pitch"),
    2: .same(proto: "roll"),
    3: .same(proto: "yaw"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.pitch) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.roll) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.yaw) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pitch.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.pitch, fieldNumber: 1)
    }
    if self.roll.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.roll, fieldNumber: 2)
    }
    if self.yaw.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.yaw, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Signalq_Orientation, rhs: Signalq_Orientation) -> Bool {
    if lhs.pitch != rhs.pitch {return false}
    if lhs.roll != rhs.roll {return false}
    if lhs.yaw != rhs.yaw {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Signalq_Gyroscope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Gyroscope"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.x) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.y) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.z) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.x, fieldNumber: 1)
    }
    if self.y.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.y, fieldNumber: 2)
    }
    if self.z.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.z, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Signalq_Gyroscope, rhs: Signalq_Gyroscope) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.z != rhs.z {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Signalq_SensorData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SensorData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "location"),
    2: .same(proto: "pressure"),
    3: .same(proto: "orientation"),
    4: .same(proto: "gyroscope"),
    5: .same(proto: "heartrate"),
    6: .same(proto: "altitude"),
    7: .same(proto: "relativeAltitude"),
    8: .same(proto: "floorsClimbed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._location) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.pressure) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._orientation) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._gyroscope) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.heartrate) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.altitude) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self.relativeAltitude) }()
      case 8: try { try decoder.decodeSingularDoubleField(value: &self.floorsClimbed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._location {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.pressure.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.pressure, fieldNumber: 2)
    }
    try { if let v = self._orientation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._gyroscope {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.heartrate.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.heartrate, fieldNumber: 5)
    }
    if self.altitude.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.altitude, fieldNumber: 6)
    }
    if self.relativeAltitude.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.relativeAltitude, fieldNumber: 7)
    }
    if self.floorsClimbed.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.floorsClimbed, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Signalq_SensorData, rhs: Signalq_SensorData) -> Bool {
    if lhs._location != rhs._location {return false}
    if lhs.pressure != rhs.pressure {return false}
    if lhs._orientation != rhs._orientation {return false}
    if lhs._gyroscope != rhs._gyroscope {return false}
    if lhs.heartrate != rhs.heartrate {return false}
    if lhs.altitude != rhs.altitude {return false}
    if lhs.relativeAltitude != rhs.relativeAltitude {return false}
    if lhs.floorsClimbed != rhs.floorsClimbed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Signalq_Classification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Classification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "score"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.score) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.result.isEmpty {
      try visitor.visitSingularStringField(value: self.result, fieldNumber: 1)
    }
    if self.score.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.score, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Signalq_Classification, rhs: Signalq_Classification) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.score != rhs.score {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Signalq_Detections: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Detections"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "detections"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.detections) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.detections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.detections, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Signalq_Detections, rhs: Signalq_Detections) -> Bool {
    if lhs.detections != rhs.detections {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Signalq_DetectionMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DetectionMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "time_UTC_milliseconds"),
    3: .same(proto: "sensors"),
    4: .same(proto: "classification"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _timeUtcMilliseconds: Int64 = 0
    var _sensors: Signalq_SensorData? = nil
    var _classification: Signalq_Classification? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _timeUtcMilliseconds = source._timeUtcMilliseconds
      _sensors = source._sensors
      _classification = source._classification
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._timeUtcMilliseconds) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._sensors) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._classification) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if _storage._timeUtcMilliseconds != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timeUtcMilliseconds, fieldNumber: 2)
      }
      try { if let v = _storage._sensors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._classification {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Signalq_DetectionMessage, rhs: Signalq_DetectionMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._timeUtcMilliseconds != rhs_storage._timeUtcMilliseconds {return false}
        if _storage._sensors != rhs_storage._sensors {return false}
        if _storage._classification != rhs_storage._classification {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Signalq_Acknowledgement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Acknowledgement"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
    2: .same(proto: "reason"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.reason) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 1)
    }
    if !self.reason.isEmpty {
      try visitor.visitSingularStringField(value: self.reason, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Signalq_Acknowledgement, rhs: Signalq_Acknowledgement) -> Bool {
    if lhs.success != rhs.success {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
